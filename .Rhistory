source('LIZstoolkit_v2.1.R')
# Covariate for alpha and psi
# We will assume there is only one covariate (and intercept)
# so the model for the probability alpha is
# 1/(1+exp(-intercept + slope*x)); where intercept is 0.1 and slope is 2
ones	<-	rep(1,quadrants*t.steps)
x.alpha	<-	cbind(ones,cov=rnorm(quadrants*t.steps))
### An example of :  simulating data and then estimating model parameters and from these getting the model predictions
quadrants <- 100
t.steps <- 50
b <- 3
gam <- 1.7
x0 <- 2
betas.a <- c(4.1,4)
betas.psi <- c(2,0.9)
# Covariate for alpha and psi
# We will assume there is only one covariate (and intercept)
# so the model for the probability alpha is
# 1/(1+exp(-intercept + slope*x)); where intercept is 0.1 and slope is 2
ones	<-	rep(1,quadrants*t.steps)
x.alpha	<-	cbind(ones,cov=rnorm(quadrants*t.steps))
x.acovar <- t(matrix(x.alpha[,2], nrow=quadrants,ncol=t.steps))
alphas	<-	t(matrix(expit(x.alpha%*%betas.a), nrow=quadrants,ncol=t.steps))
x.psi	<-	cbind(ones,rnorm(quadrants*t.steps))
x.pcovar <- t(matrix(x.psi[,2], nrow=quadrants, ncol=t.steps))
psi		<-	t(matrix(expit(x.psi%*%betas.psi), nrow=quadrants, ncol=t.steps))
tsdata	<-	rdsd(t.steps=t.steps,t0=x0,alpha=alphas,beta=b,gamma=gam,psi=psi,reps=quadrants)
list.4test <- list(y = tsdata, acovar = x.acovar, psicovar = x.pcovar)
mod		<-	dsd.glm(alpha.mod=y~acovar,psi.mod=y~psicovar,data=list.4test, family="NB")
print(mod)
### An example of :  simulating data and then estimating model parameters and from these getting the model predictions
quadrants <- 100
t.steps <- 50
b <- 3
gam <- 1.7
x0 <- 2
betas.a <- c(4.1,4)
betas.psi <- c(2,0.9)
# Covariate for alpha and psi
# We will assume there is only one covariate (and intercept)
# so the model for the probability alpha is
# 1/(1+exp(-intercept + slope*x)); where intercept is 0.1 and slope is 2
ones	<-	rep(1,quadrants*t.steps)
x.alpha	<-	cbind(ones,cov=rnorm(quadrants*t.steps))
x.acovar <- t(matrix(x.alpha[,2], nrow=quadrants,ncol=t.steps))
alphas	<-	t(matrix(expit(x.alpha%*%betas.a), nrow=quadrants,ncol=t.steps))
x.psi	<-	cbind(ones,rnorm(quadrants*t.steps))
x.pcovar <- t(matrix(x.psi[,2], nrow=quadrants, ncol=t.steps))
psi		<-	t(matrix(expit(x.psi%*%betas.psi), nrow=quadrants, ncol=t.steps))
tsdata	<-	rdsd(t.steps=t.steps,t0=x0,alpha=alphas,beta=b,gamma=gam,psi=psi,reps=quadrants)
list.4test <- list(y = tsdata, acovar = x.acovar, psicovar = x.pcovar)
source('~/Documents/PhD/Collaborations/DSD/DSDToolkit/Chamois_analyses.R', echo=TRUE)
tsdata
list.4test <- list(y = tsdata, acovar = x.acovar, psicovar = x.pcovar)
mod		<-	dsd.glm(alpha.mod=y~acovar,psi.mod=y~psicovar,data=list.4test, family="NB")
print(mod)
x.alpha
x.acovar
ones
x.acovar
x.alpha
# Covariate for alpha and psi
# We will assume there is only one covariate (and intercept)
# so the model for the probability alpha is
# 1/(1+exp(-intercept + slope*x)); where intercept is 0.1 and slope is 2
ones	<-	rep(1,quadrants*t.steps)
ones
x.alpha	<-	cbind(ones,cov=rnorm(quadrants*t.steps))
x.alpha
x.acovar <- t(matrix(x.alpha[,2], nrow=quadrants,ncol=t.steps))
x.acovar
alphas	<-	t(matrix(expit(x.alpha%*%betas.a), nrow=quadrants,ncol=t.steps))
alphas
ones	<-	rep(1,quads*tsteps)
quads	<-	ncol(tsdata)
tsteps	<-	nrow(tsdata)
ones	<-	rep(1,quads*tsteps)
x.acovar
as.vector(x.acovar)
dsd.pred <- function(data,model,cov.alpha,cov.psi) { # data can be a data frame or a list with data and covariates for alpha and psi
# Set up
if(class(data)!="list"&class(data)!="data.frame"){stop("data must be a list or a data.frame")}
if(class(data)=="list"){tsdata	<-	data[[1]]}else{tsdata<-data}
if(class(data)=="list"){cov.alpha	<-	data[[2]]}else{cov.alpha<-cov.alpha}
if(class(data)=="list"){cov.psi	<-	data[[3]]}else{cov.psi<-cov.psi}
quads	<-	ncol(tsdata)
tsteps	<-	nrow(tsdata)
# Handle covariates
ones	<-	rep(1,quads*tsteps)
x.alpha	<-	cbind(ones,cov=as.vector(cov.alpha))
x.psi	<-	cbind(ones,cov=as.vector(cov.psi))
# Compute matrix of alpha and psi
alphas <- t(matrix(expit(x.alpha%*%model$alpha), nrow=ncol(data),ncol=nrow(data)))
psis <- t(matrix(expit(x.psi%*%model$psi), nrow=ncol(data),ncol=nrow(data)))
preds <- matrix(nrow=tsteps, ncol=quads)
preds[1,] <- data[1,]
for (i in 2:tsteps) {
for (j in 1:quads) {
preds[i,j] <- mu.x.nb(a=alphas[i,j],b=mod$b,gam=mod$gamma,psi=psis[i,j],x=preds[i-1,j])
}
}
return(preds)
}
quadrants <- 100
t.steps <- 50
b <- 3
gam <- 1.7
x0 <- 2
betas.a <- c(4.1,4)
betas.psi <- c(2,0.9)
# Covariate for alpha and psi
# We will assume there is only one covariate (and intercept)
# so the model for the probability alpha is
# 1/(1+exp(-intercept + slope*x)); where intercept is 0.1 and slope is 2
ones	<-	rep(1,quadrants*t.steps)
x.alpha	<-	cbind(ones,cov=rnorm(quadrants*t.steps))
x.acovar <- t(matrix(x.alpha[,2], nrow=quadrants,ncol=t.steps)) # this is the simulated matrix for the covariate of alpha
alphas	<-	t(matrix(expit(x.alpha%*%betas.a), nrow=quadrants,ncol=t.steps))
x.psi	<-	cbind(ones,rnorm(quadrants*t.steps))
x.pcovar <- t(matrix(x.psi[,2], nrow=quadrants, ncol=t.steps))
psi		<-	t(matrix(expit(x.psi%*%betas.psi), nrow=quadrants, ncol=t.steps))
tsdata	<-	rdsd(t.steps=t.steps,t0=x0,alpha=alphas,beta=b,gamma=gam,psi=psi,reps=quadrants)
list.4test <- list(y = tsdata, acovar = x.acovar, psicovar = x.pcovar)
mod.pred <- dsd.pred(data=tsdata, model=mod, cov.alpha=x.acovar, cov.psi=x.psicovar)
tsdata
mod.pred <- dsd.pred(data=as.data.frame(tsdata), model=mod, cov.alpha=x.acovar, cov.psi=x.psicovar)
mod.pred <- dsd.pred(data=as.data.frame(tsdata), model=mod, cov.alpha=x.acovar, cov.psi=x.pcovar)
as.data.frame(tsdata)
# Set up
if(class(data)!="list"&class(data)!="data.frame"){stop("data must be a list or a data.frame")}
data <- as.data.frame(tsdata)
# Set up
if(class(data)!="list"&class(data)!="data.frame"){stop("data must be a list or a data.frame")}
if(class(data)=="list"){tsdata	<-	data[[1]]}else{tsdata<-data}
if(class(data)=="list"){cov.alpha	<-	data[[2]]}else{cov.alpha<-cov.alpha}
cov.alpha=x.acovar
cov.psi=x.pcovar
x.acovar
if(class(data)=="list"){cov.alpha	<-	data[[2]]}else{cov.alpha<-cov.alpha}
if(class(data)=="list"){cov.psi	<-	data[[3]]}else{cov.psi<-cov.psi}
quads	<-	ncol(tsdata)
tsteps	<-	nrow(tsdata)
quads
tsteps
# Handle covariates
ones	<-	rep(1,quads*tsteps)
x.alpha	<-	cbind(ones,cov=as.vector(cov.alpha))
x.alpha
x.psi	<-	cbind(ones,cov=as.vector(cov.psi))
x.psi
# Compute matrix of alpha and psi
alphas <- t(matrix(expit(x.alpha%*%model$alpha), nrow=ncol(data),ncol=nrow(data)))
model=mod
# Compute matrix of alpha and psi
alphas <- t(matrix(expit(x.alpha%*%model$alpha), nrow=ncol(data),ncol=nrow(data)))
alphas
psis <- t(matrix(expit(x.psi%*%model$psi), nrow=ncol(data),ncol=nrow(data)))
psis
alphas
psis
preds <- matrix(nrow=tsteps, ncol=quads)
preds[1,] <- data[1,]
preds
data[1,]
as.matrix(data[1,])
tsdata[1,]
as.matrix(data)
if(class(data)=="list"){tsdata	<-	data[[1]]}else{tsdata<-as.matrix(data)}
quads	<-	ncol(tsdata)
tsteps	<-	nrow(tsdata)
# Handle covariates
ones	<-	rep(1,quads*tsteps)
x.alpha	<-	cbind(ones,cov=as.vector(cov.alpha))
x.psi	<-	cbind(ones,cov=as.vector(cov.psi))
# Compute matrix of alpha and psi
alphas <- t(matrix(expit(x.alpha%*%model$alpha), nrow=ncol(data),ncol=nrow(data)))
psis <- t(matrix(expit(x.psi%*%model$psi), nrow=ncol(data),ncol=nrow(data)))
preds <- matrix(nrow=tsteps, ncol=quads)
preds[1,] <- tsdata[1,]
for (i in 2:tsteps) {
for (j in 1:quads) {
preds[i,j] <- mu.x.nb(a=alphas[i,j],b=mod$b,gam=mod$gamma,psi=psis[i,j],x=preds[i-1,j])
}
}
return(preds)
dsd.pred <- function(data,model,cov.alpha,cov.psi) { # data can be a data frame or a list with data and covariates for alpha and psi
# Set up
if(class(data)!="list"&class(data)!="data.frame"){stop("data must be a list or a data.frame")}
if(class(data)=="list"){tsdata	<-	data[[1]]}else{tsdata<-as.matrix(data)}
if(class(data)=="list"){cov.alpha	<-	data[[2]]}else{cov.alpha<-cov.alpha}
if(class(data)=="list"){cov.psi	<-	data[[3]]}else{cov.psi<-cov.psi}
quads	<-	ncol(tsdata)
tsteps	<-	nrow(tsdata)
# Handle covariates
ones	<-	rep(1,quads*tsteps)
x.alpha	<-	cbind(ones,cov=as.vector(cov.alpha))
x.psi	<-	cbind(ones,cov=as.vector(cov.psi))
# Compute matrix of alpha and psi
alphas <- t(matrix(expit(x.alpha%*%model$alpha), nrow=ncol(data),ncol=nrow(data)))
psis <- t(matrix(expit(x.psi%*%model$psi), nrow=ncol(data),ncol=nrow(data)))
preds <- matrix(nrow=tsteps, ncol=quads)
preds[1,] <- tsdata[1,]
for (i in 2:tsteps) {
for (j in 1:quads) {
preds[i,j] <- mu.x.nb(a=alphas[i,j],b=mod$b,gam=mod$gamma,psi=psis[i,j],x=preds[i-1,j])
}
}
return(preds)
}
mod.pred <- dsd.pred(data=as.data.frame(tsdata), model=mod, cov.alpha=x.acovar, cov.psi=x.pcovar)
mod.pred
?model.frame
dsd.pred <- function(data,model,cov.alpha,cov.psi) { # two options for data format:
# opt 1: data is a list with the first object being the data, the second the covariate for alpha, and the third the covariate for psi
# opt 2: data is a data frame with the data, and cov.alpha and cov.psi are data frames with the covariates
# Set up
if(class(data)!="list"&class(data)!="data.frame"){stop("data must be a list or a data.frame")}
if(class(data)=="list"){tsdata	<-	data[[1]]}else{tsdata<-as.matrix(data)}
if(class(data)=="list"){cov.alpha	<-	data[[2]]}else{cov.alpha<-as.matrix(cov.alpha)}
if(class(data)=="list"){cov.psi	<-	data[[3]]}else{cov.psi<-as.matrix(cov.psi)}
quads	<-	ncol(tsdata)
tsteps	<-	nrow(tsdata)
# Handle covariates
ones	<-	rep(1,quads*tsteps)
x.alpha	<-	cbind(ones,cov=as.vector(cov.alpha))
x.psi	<-	cbind(ones,cov=as.vector(cov.psi))
# Compute matrix of alpha and psi
alphas <- t(matrix(expit(x.alpha%*%model$alpha), nrow=ncol(data),ncol=nrow(data)))
psis <- t(matrix(expit(x.psi%*%model$psi), nrow=ncol(data),ncol=nrow(data)))
preds <- matrix(nrow=tsteps, ncol=quads)
preds[1,] <- tsdata[1,]
for (i in 2:tsteps) {
for (j in 1:quads) {
preds[i,j] <- mu.x.nb(a=alphas[i,j],b=mod$b,gam=mod$gamma,psi=psis[i,j],x=preds[i-1,j])
}
}
return(preds)
}
mod.pred <- dsd.pred(data=as.data.frame(tsdata), model=mod, cov.alpha=x.acovar, cov.psi=x.pcovar)
mod.pred
source('LIZstoolkit_v2.1.R')
quadrants <- 100
t.steps <- 50
b <- 3
gam <- 1.7
x0 <- 2
betas.a <- c(4.1,4)
betas.psi <- c(2,0.9)
# Covariate for alpha and psi
# We will assume there is only one covariate (and intercept)
# so the model for the probability alpha is
# 1/(1+exp(-intercept + slope*x)); where intercept is 0.1 and slope is 2
ones	<-	rep(1,quadrants*t.steps)
x.alpha	<-	cbind(ones,cov=rnorm(quadrants*t.steps))
x.acovar <- t(matrix(x.alpha[,2], nrow=quadrants,ncol=t.steps)) # this is the simulated matrix for the covariate of alpha
x.psi	<-	cbind(ones,rnorm(quadrants*t.steps))
x.pcovar <- t(matrix(x.psi[,2], nrow=quadrants, ncol=t.steps))
tsdata	<-	rdsd(t.steps=t.steps,t0=x0,alpha=alphas,beta=b,gamma=gam,psi=psi,reps=quadrants)
alphas	<-	t(matrix(expit(x.alpha%*%betas.a), nrow=quadrants,ncol=t.steps))
psi		<-	t(matrix(expit(x.psi%*%betas.psi), nrow=quadrants, ncol=t.steps))
tsdata	<-	rdsd(t.steps=t.steps,t0=x0,alpha=alphas,beta=b,gamma=gam,psi=psi,reps=quadrants)
list.4test <- list(y = tsdata, acovar = x.acovar, psicovar = x.pcovar)
mod		<-	dsd.glm(alpha.mod=y~acovar,psi.mod=y~psicovar,data=list.4test, family="NB")
print(mod)
dsd.pred <- function(data,model,cov.alpha,cov.psi) { # two options for data format:
# opt 1: data is a list with the first object being the data, the second the covariate for alpha, and the third the covariate for psi
# opt 2: data is a data frame with the data, and cov.alpha and cov.psi are data frames with the covariates
# Set up
if(class(data)!="list"&class(data)!="matrix"){stop("data must be a list or a matrix")}
if(class(data)=="list"){tsdata	<-	data[[1]]}else{tsdata<-data}
if(class(data)=="list"){cov.alpha	<-	data[[2]]}else{cov.alpha<-cov.alpha}
if(class(data)=="list"){cov.psi	<-	data[[3]]}else{cov.psi<-cov.psi}
quads	<-	ncol(tsdata)
tsteps	<-	nrow(tsdata)
# Handle covariates
ones	<-	rep(1,quads*tsteps)
x.alpha	<-	cbind(ones,cov=as.vector(cov.alpha))
x.psi	<-	cbind(ones,cov=as.vector(cov.psi))
# Compute matrix of alpha and psi
alphas <- t(matrix(expit(x.alpha%*%model$alpha), nrow=ncol(data),ncol=nrow(data)))
psis <- t(matrix(expit(x.psi%*%model$psi), nrow=ncol(data),ncol=nrow(data)))
preds <- matrix(nrow=tsteps, ncol=quads)
preds[1,] <- tsdata[1,]
for (i in 2:tsteps) {
for (j in 1:quads) {
preds[i,j] <- mu.x.nb(a=alphas[i,j],b=mod$b,gam=mod$gamma,psi=psis[i,j],x=preds[i-1,j])
}
}
return(preds)
}
mod.pred <- dsd.pred(data=tsdata, model=mod, cov.alpha=x.acovar, cov.psi=x.pcovar)
mod.pred
